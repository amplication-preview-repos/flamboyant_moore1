/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, MovieRequest as PrismaMovieRequest } from "@prisma/client";

export class MovieRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MovieRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.movieRequest.count(args);
  }

  async movieRequests(
    args: Prisma.MovieRequestFindManyArgs
  ): Promise<PrismaMovieRequest[]> {
    return this.prisma.movieRequest.findMany(args);
  }
  async movieRequest(
    args: Prisma.MovieRequestFindUniqueArgs
  ): Promise<PrismaMovieRequest | null> {
    return this.prisma.movieRequest.findUnique(args);
  }
  async createMovieRequest(
    args: Prisma.MovieRequestCreateArgs
  ): Promise<PrismaMovieRequest> {
    return this.prisma.movieRequest.create(args);
  }
  async updateMovieRequest(
    args: Prisma.MovieRequestUpdateArgs
  ): Promise<PrismaMovieRequest> {
    return this.prisma.movieRequest.update(args);
  }
  async deleteMovieRequest(
    args: Prisma.MovieRequestDeleteArgs
  ): Promise<PrismaMovieRequest> {
    return this.prisma.movieRequest.delete(args);
  }
}
