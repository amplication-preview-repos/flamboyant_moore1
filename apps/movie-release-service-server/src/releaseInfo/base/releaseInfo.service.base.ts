/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ReleaseInfo as PrismaReleaseInfo } from "@prisma/client";

export class ReleaseInfoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ReleaseInfoCountArgs, "select">
  ): Promise<number> {
    return this.prisma.releaseInfo.count(args);
  }

  async releaseInfos(
    args: Prisma.ReleaseInfoFindManyArgs
  ): Promise<PrismaReleaseInfo[]> {
    return this.prisma.releaseInfo.findMany(args);
  }
  async releaseInfo(
    args: Prisma.ReleaseInfoFindUniqueArgs
  ): Promise<PrismaReleaseInfo | null> {
    return this.prisma.releaseInfo.findUnique(args);
  }
  async createReleaseInfo(
    args: Prisma.ReleaseInfoCreateArgs
  ): Promise<PrismaReleaseInfo> {
    return this.prisma.releaseInfo.create(args);
  }
  async updateReleaseInfo(
    args: Prisma.ReleaseInfoUpdateArgs
  ): Promise<PrismaReleaseInfo> {
    return this.prisma.releaseInfo.update(args);
  }
  async deleteReleaseInfo(
    args: Prisma.ReleaseInfoDeleteArgs
  ): Promise<PrismaReleaseInfo> {
    return this.prisma.releaseInfo.delete(args);
  }
}
