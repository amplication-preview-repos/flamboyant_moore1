/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MovieRequest } from "./MovieRequest";
import { MovieRequestCountArgs } from "./MovieRequestCountArgs";
import { MovieRequestFindManyArgs } from "./MovieRequestFindManyArgs";
import { MovieRequestFindUniqueArgs } from "./MovieRequestFindUniqueArgs";
import { CreateMovieRequestArgs } from "./CreateMovieRequestArgs";
import { UpdateMovieRequestArgs } from "./UpdateMovieRequestArgs";
import { DeleteMovieRequestArgs } from "./DeleteMovieRequestArgs";
import { MovieRequestService } from "../movieRequest.service";
@graphql.Resolver(() => MovieRequest)
export class MovieRequestResolverBase {
  constructor(protected readonly service: MovieRequestService) {}

  async _movieRequestsMeta(
    @graphql.Args() args: MovieRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MovieRequest])
  async movieRequests(
    @graphql.Args() args: MovieRequestFindManyArgs
  ): Promise<MovieRequest[]> {
    return this.service.movieRequests(args);
  }

  @graphql.Query(() => MovieRequest, { nullable: true })
  async movieRequest(
    @graphql.Args() args: MovieRequestFindUniqueArgs
  ): Promise<MovieRequest | null> {
    const result = await this.service.movieRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MovieRequest)
  async createMovieRequest(
    @graphql.Args() args: CreateMovieRequestArgs
  ): Promise<MovieRequest> {
    return await this.service.createMovieRequest({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MovieRequest)
  async updateMovieRequest(
    @graphql.Args() args: UpdateMovieRequestArgs
  ): Promise<MovieRequest | null> {
    try {
      return await this.service.updateMovieRequest({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MovieRequest)
  async deleteMovieRequest(
    @graphql.Args() args: DeleteMovieRequestArgs
  ): Promise<MovieRequest | null> {
    try {
      return await this.service.deleteMovieRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
