/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MovieRequestService } from "../movieRequest.service";
import { MovieRequestCreateInput } from "./MovieRequestCreateInput";
import { MovieRequest } from "./MovieRequest";
import { MovieRequestFindManyArgs } from "./MovieRequestFindManyArgs";
import { MovieRequestWhereUniqueInput } from "./MovieRequestWhereUniqueInput";
import { MovieRequestUpdateInput } from "./MovieRequestUpdateInput";

export class MovieRequestControllerBase {
  constructor(protected readonly service: MovieRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MovieRequest })
  async createMovieRequest(
    @common.Body() data: MovieRequestCreateInput
  ): Promise<MovieRequest> {
    return await this.service.createMovieRequest({
      data: data,
      select: {
        country: true,
        createdAt: true,
        id: true,
        tmdbId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MovieRequest] })
  @ApiNestedQuery(MovieRequestFindManyArgs)
  async movieRequests(@common.Req() request: Request): Promise<MovieRequest[]> {
    const args = plainToClass(MovieRequestFindManyArgs, request.query);
    return this.service.movieRequests({
      ...args,
      select: {
        country: true,
        createdAt: true,
        id: true,
        tmdbId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MovieRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async movieRequest(
    @common.Param() params: MovieRequestWhereUniqueInput
  ): Promise<MovieRequest | null> {
    const result = await this.service.movieRequest({
      where: params,
      select: {
        country: true,
        createdAt: true,
        id: true,
        tmdbId: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MovieRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMovieRequest(
    @common.Param() params: MovieRequestWhereUniqueInput,
    @common.Body() data: MovieRequestUpdateInput
  ): Promise<MovieRequest | null> {
    try {
      return await this.service.updateMovieRequest({
        where: params,
        data: data,
        select: {
          country: true,
          createdAt: true,
          id: true,
          tmdbId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MovieRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMovieRequest(
    @common.Param() params: MovieRequestWhereUniqueInput
  ): Promise<MovieRequest | null> {
    try {
      return await this.service.deleteMovieRequest({
        where: params,
        select: {
          country: true,
          createdAt: true,
          id: true,
          tmdbId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
