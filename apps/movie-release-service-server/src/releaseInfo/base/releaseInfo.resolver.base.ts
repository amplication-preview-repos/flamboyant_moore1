/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ReleaseInfo } from "./ReleaseInfo";
import { ReleaseInfoCountArgs } from "./ReleaseInfoCountArgs";
import { ReleaseInfoFindManyArgs } from "./ReleaseInfoFindManyArgs";
import { ReleaseInfoFindUniqueArgs } from "./ReleaseInfoFindUniqueArgs";
import { CreateReleaseInfoArgs } from "./CreateReleaseInfoArgs";
import { UpdateReleaseInfoArgs } from "./UpdateReleaseInfoArgs";
import { DeleteReleaseInfoArgs } from "./DeleteReleaseInfoArgs";
import { ReleaseInfoService } from "../releaseInfo.service";
@graphql.Resolver(() => ReleaseInfo)
export class ReleaseInfoResolverBase {
  constructor(protected readonly service: ReleaseInfoService) {}

  async _releaseInfosMeta(
    @graphql.Args() args: ReleaseInfoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ReleaseInfo])
  async releaseInfos(
    @graphql.Args() args: ReleaseInfoFindManyArgs
  ): Promise<ReleaseInfo[]> {
    return this.service.releaseInfos(args);
  }

  @graphql.Query(() => ReleaseInfo, { nullable: true })
  async releaseInfo(
    @graphql.Args() args: ReleaseInfoFindUniqueArgs
  ): Promise<ReleaseInfo | null> {
    const result = await this.service.releaseInfo(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ReleaseInfo)
  async createReleaseInfo(
    @graphql.Args() args: CreateReleaseInfoArgs
  ): Promise<ReleaseInfo> {
    return await this.service.createReleaseInfo({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ReleaseInfo)
  async updateReleaseInfo(
    @graphql.Args() args: UpdateReleaseInfoArgs
  ): Promise<ReleaseInfo | null> {
    try {
      return await this.service.updateReleaseInfo({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ReleaseInfo)
  async deleteReleaseInfo(
    @graphql.Args() args: DeleteReleaseInfoArgs
  ): Promise<ReleaseInfo | null> {
    try {
      return await this.service.deleteReleaseInfo(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
